
shouldFail fn = isLeft <| catchAll fn

tls.tests = do
  check "connects to example.com over tls" do
    socket = Socket.client (HostName "example.com") (Port "443")
    config = ClientConfig.default (HostName "example.com") ""
    tls = base.IO.net.Tls.newClient config socket
    conn = base.IO.net.Tls.handshake tls
    TlsSocket.send conn (toUtf8 "GET /index.html HTTP/1.0\r\n\r\n")
    response = TlsSocket.receive conn
    TlsSocket.close conn
    contains "HTTP/1.0 200 OK" (fromUtf8 response)
  check "trying to connect to example.com:443 without tls fails" do shouldFail do
    socket = Socket.client (HostName "example.com") (Port "443")
    Socket.send socket (toUtf8 "GET /index.html HTTP/1.0\r\n\r\n")
    Socket.receive socket

tcp.tests = do
  check "connects to example.com" do
    socket = Socket.client (HostName "example.com") (Port "80")
    Socket.send socket (toUtf8 "GET /index.html HTTP/1.0\r\n\r\n")
    response = Socket.receive socket
    Socket.close socket
    contains "HTTP/1.0 200 OK" (base.Text.fromUtf8 response)
  check "rejects invalid port" do shouldFail do Socket.client (HostName "example.com") (Port "what")
  check "no send after close" do shouldFail do
    socket = Socket.client (HostName "example.com") (Port "80")
    Socket.close socket
    Socket.send socket (toUtf8 "GET /index.html HTTP/1.0\r\n\r\n")
  check "no send on listener" do shouldFail do
    match Socket.server None (Port "0") with
        BoundServerSocket socket -> Socket.send socket (toUtf8 "what")


  setup = catchAll do
      socket = Socket.listen (server None (Port "0"))
      port = match socket with
          ListeningServerSocket sock -> Socket.port sock
      (socket, port)

  match setup with
      Left exn ->
        Debug.trace "Setup failed" exn
        Tests.fail "Unable to bind and listen on a socket" ""
      Right (socket, port) ->
          serve = do
              sock = Socket.accept socket
              data = Socket.receive sock
              Socket.send sock (toUtf8 "from server")
              base.Text.fromUtf8 data

          serveResult = !Promise.new
          _ = fork do Promise.write serveResult (catchAll serve)

          data = catchAll do
              clientSocket = Socket.client (HostName "localhost") (Port (Nat.toText port))
              Socket.send clientSocket (toUtf8 "from client")
              base.Text.fromUtf8 (Socket.receive clientSocket)

          checkEqual "Server received data" (Promise.read serveResult) (Right "from client")
          checkEqual "Client received data" data (Right "from server")
