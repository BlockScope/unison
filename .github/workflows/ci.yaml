name: CI

defaults:
  run:
    working-directory: unison

on:
  # Build on every pull request (and new PR commit)
  pull_request:
  # Build on new pushes to trunk (E.g. Merge commits)
  # Without the branch filter, each commit on a branch with a PR is triggered twice.
  # See: https://github.community/t/how-to-trigger-an-action-on-push-or-pull-request-but-not-both/16662
  push:
    branches:
      - trunk
    tags:
      - release/*

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Run each build to completion, regardless of if any have failed
      fail-fast: false
      matrix:
       include:
         - os: ubuntu-20.04
           # Only bother building haddocks on trunk.
           build_haddocks: true
           # If on trunk, pass `--haddock`, otherwise just pass an empty argument.
           haddock_flags: '--haddock'
         - os: macOS-11.0
           build_haddocks: false
           haddock_flags: ''
         - os: macOS-10.15
           build_haddocks: false
           haddock_flags: ''
    steps:
      - uses: actions/checkout@v2
        with:
          path: unison

      - name: sanity check
        run: |
          echo matrix.os ${{ matrix.os }}
          echo matrix.build_haddocks ${{ matrix.build_haddocks }}
          echo matrix.haddock_flags ${{ matrix.haddock_flags }}
          echo github.ref ${{ github.ref }}

      # The number towards the beginning of the cache keys allow you to manually avoid using a previous cache.
      # GitHub will automatically delete caches that haven't been accessed in 7 days, but there is no way to
      # purge one manually.

      # Cache ~/.stack, keyed by the contents of 'stack.yaml'.
      - uses: actions/cache@v2
        name: cache ~/.stack
        with:
          path: ~/.stack
          key: stack-0_${{matrix.os}}-${{hashFiles('stack.yaml')}}-${{matrix.haddock_flags}}
          # Fall-back to use the most recent cache for the OS from any stack.yaml
          restore-keys: stack-0_${{matrix.os}}

      # Cache each local package's ~/.stack-work for fast incremental builds in CI.
      - uses: actions/cache@v2
        name: cache .stack-work
        with:
          path: |
            **/.stack-work
          # Use separate caches for each OS.
          # Caches from this branch will be used first, then trunk caches will
          # be used as a backup.
          key: stack-work-2_${{matrix.os}}-${{matrix.haddock_flags}}

      # Install stack by downloading the binary from GitHub. The installation process is different for Linux and macOS,
      # so this is split into two steps, only one of which will run on any particular build.
      - name: install stack (Linux)
        working-directory: unison
        if: runner.os == 'Linux'
        run: |
          curl -L https://github.com/commercialhaskell/stack/releases/download/v2.5.1/stack-2.5.1-linux-x86_64.tar.gz | tar -xz
          echo "$HOME/stack-2.5.1-linux-x86_64/" >> $GITHUB_PATH
      - name: install stack (macOS)
        working-directory: unison
        if: runner.os == 'macOS'
        run: |
          curl -L https://github.com/commercialhaskell/stack/releases/download/v2.5.1/stack-2.5.1-osx-x86_64.tar.gz | tar -xz
          echo "$HOME/stack-2.5.1-osx-x86_64/" >> $GITHUB_PATH

      # One of the transcripts fails if the user's git name hasn't been set.
      - name: set git user info
        working-directory: unison
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: remove ~/.stack/setup-exe-cache on macOS
        working-directory: unison
        if: runner.os == 'macOS'
        run: rm -rf ~/.stack/setup-exe-cache

      # Build deps, then build local code. Splitting it into two steps just allows us to see how much time each step
      # takes.
      - name: build dependencies
        working-directory: unison
        run: stack --no-terminal build --fast --only-dependencies ${{ matrix.haddock_flags }}

      - name: build
        working-directory: unison
        run: stack --no-terminal build --fast ${{ matrix.haddock_flags }}

      # Run each test suite (tests and transcripts)
      - name: tests
        working-directory: unison
        run: stack --no-terminal exec tests
      - name: transcripts
        run: |
          stack --no-terminal exec transcripts
          git diff
          x=`git status --porcelain -uno` bash -c 'if [[ -n $x ]]; then echo "$x" && false; fi'
      - name: prettyprint-round-trip
        run: stack --no-terminal exec unison transcript unison-src/transcripts-round-trip/main.md
      - name: other test suites
        run: stack --no-terminal test unison-util-relation

      # Haddocks
      - name: Checkout haddocks branch
        if: matrix.build_haddocks
        uses: actions/checkout@v2
        with:
          ref: 'haddocks'
          path: 'haddocks'

      - name: Copy haddocks
        if: matrix.build_haddocks
        working-directory: 'unison'
        run: |
          docs_root="$(stack path --local-doc-root)"
          # Erase any stale files
          cd "$GITHUB_WORKSPACE"/haddocks
          rm -rf ./*
          cp -r "${docs_root}"/* "$GITHUB_WORKSPACE"/haddocks
          git add .
          git commit -m "Regenerate haddocks based on ${GITHUB_SHA}"
          git push
